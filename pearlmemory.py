#!/usr/bin/env pipenv run python
# -*- coding: utf-8 -*-
"""
    pearlmemory is a variation of french-genanki-jupyter made for German
    learners.
    Copyright (C) 2020  errbufferoverfl.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import csv
import logging
import os
import uuid
from pathlib import Path
from textwrap import dedent
from typing import Tuple, Dict

import PIL
import azure.cognitiveservices.speech as speechsdk
import genanki
import langdetect as langdetect
import requests
import ruamel.yaml
from PIL import Image
from azure.cognitiveservices.speech.audio import AudioOutputConfig
from resizeimage import resizeimage, imageexceptions

search_csv_filename = "anki_search.csv"
csv_file_encoding = 'mac_roman'
genanki_id_yaml = "genanki_ids.yaml"
bing_settings_yaml_filename = 'bing_settings.yaml'
resize_image_x, resize_image_y = 400, 300

# index of Bing image we use
image_idx = 0


def create_id() -> int:
    """
    Creates a maybe unique ID for the Anki ID.

    Returns: The first five digits of a UUID4 integer.
    """
    return int(str(uuid.uuid4().int)[:5])


def download(url, filename) -> None:
    """
    Downloads a given file from a URL.

    Args:
        url: The location of the file as a Uniform Resource Locator (URL)
        filename: The name of the resource being downloaded based on a Uniform Resource Identifier (URI) fragment.
            For example: https://www.wildlifeworldwide.com/images/categories/polar_bear_watching_select_locations.jpg
            The filename = polar_bear_watching_select_locations.jpg

    Returns: None
    """
    with open(filename, 'wb') as f:
        logging.info(f'Downloading: {filename}')
        img_data = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
        img_data.raise_for_status()
        f.write(img_data.content)


def bing_setup() -> Tuple[Dict, Dict, Dict]:
    """
    Setup the Bing API for usage, this configures the headers with authentication and the parameters for searching.

    Returns: Tuple[Dict, Dict, Dict
    """
    with open(bing_settings_yaml_filename, 'r') as stream:
        try:
            settings = ruamel.yaml.load(stream, Loader=ruamel.yaml.Loader)
            logging.info('Loaded Bing API settings.')
        except ruamel.yaml.YAMLError as exc:
            logging.critical(exc)
        else:
            headers = {"Ocp-Apim-Subscription-Key": settings['bing_search_key']}
            params = {
                'setLang': settings['setLang'],
                'mkt': settings['mkt'],
                'imageType': settings['imageType'],
                'count': settings['count']
            }

            return headers, params, settings


def load_ids() -> Dict:
    """
    Loads the IDs generated by the create_id() function.
    Returns: Dict
    """
    ids = dict()
    with open(genanki_id_yaml, 'r') as stream:
        try:
            ids = ruamel.yaml.load(stream, Loader=ruamel.yaml.Loader)
        except ruamel.yaml.YAMLError as exc:
            logging.critical(exc)
    return ids


def load_search_list() -> list:
    """
    Loads the lists of words from anki_search.csv it assumes there is no header in the CSV.
    Returns: list
    """
    search_list = list()

    with open(search_csv_filename, encoding='utf-8') as f:
        reader = csv.reader(f)
        for row in reader:
            search_list.append(row[0])
    return search_list


def write_genaki() -> None:
    if not Path(genanki_id_yaml).is_file():
        with open(genanki_id_yaml, 'wt') as file:
            file.write('deck_id: ' + str(create_id()) + '\n')
            file.write('model_id: ' + str(create_id()) + '\n')


def get_search_term_data(search_list: list, request_headers: dict, request_parameters: dict, settings: dict) -> list:
    img_types = ['jpeg', 'jpg', 'png', 'gif']

    results = []
    for search in search_list:
        result = dict()

        logging.info('Processing: ' + search)

        # translate the english word list to german
        az_search = azure_translate(settings, search)

        if search.startswith('the'):
            result['de-word'] = az_search
            result['en-word'] = search
        elif any(special_chars in search for special_chars in search):
            result['de-word'] = search
            result['en-word'] = az_search
        elif langdetect.detect(az_search) == 'en':
            result['en-word'] = az_search
            result['de-word'] = search
        elif langdetect.detect(az_search) == 'de':
            result['de-word'] = az_search
            result['en-word'] = search

        # download the german phrase and convert to speech
        de_filename = azure_voice_translate(settings, result['de-word'])
        result['de-voice'] = de_filename

        # process bing image
        bing_advanced_query = f" language:{settings['language']} loc:{settings['loc']}"
        request_parameters['q'] = result['de-word'] + bing_advanced_query
        response = requests.get(settings['image_api_url'], headers=request_headers, params=request_parameters)
        response.raise_for_status()
        search_results = response.json()

        result['bing_results_json'] = search_results
        result['image_url'] = search_results['value'][image_idx]['contentUrl']
        result['image_page_url'] = search_results['value'][image_idx]['hostPageUrl']

        # get end of url after last /
        original_image_filename = result['image_url'].rsplit('/', 1)[-1]
        original_image_ext = original_image_filename.rsplit('.', 1)[-1]

        result['image_file_original'] = original_image_filename.split('?')[0]
        result['image_file'] = search + "." + original_image_ext

        if original_image_ext not in img_types:
            original_image_ext = 'jpg'

        # download image file
        if not Path(result['image_file']).is_file():
            try:
                download(result['image_url'], result['image_file'])
            except (requests.HTTPError, requests.exceptions.SSLError):
                logging.warning("Couldn't download image, skipping")
                result['image_file'] = "missing.png"
        else:
            logging.warning("File exists, skipping: " + result['image_file'])

        # resize image file
        resized_filename = search + "_resized." + original_image_ext

        if Path(result['image_file']).is_file() and not Path(resized_filename).is_file():
            with open(result['image_file'], 'r+b') as f:
                try:
                    with Image.open(f) as image:
                        logging.info("Resizing image: " + result['image_file'])
                        try:
                            cover = resizeimage.resize_cover(image, [resize_image_x, resize_image_y])
                        except imageexceptions.ImageSizeError as image_err:
                            logging.warning(image_err.message)
                            img = Image.open(f)
                            img.save(resized_filename)
                        else:
                            cover.save(resized_filename, image.format)
                except PIL.UnidentifiedImageError:
                    logging.warning("Cannot identify image file, deleting")
                    os.remove(result['image_file'])
        result['image_file_resized'] = resized_filename

        results.append(result)
    logging.info("Completed Queries!")

    return results


def create_anki_model(ids: dict) -> genanki.Model:
    # Create Anki model
    my_model = genanki.Model(
        int(ids['model_id']),
        'Pearl Memory - DE',
        fields=[
            {'name': 'Word or Phrase'},
            {'name': 'Translation'},
            {'name': 'Picture'},
            {'name': 'Audio'},
        ],
        templates=[
            {
                'name': 'English to German',
                'qfmt': dedent("""
                    <div>{{Picture}}</div>
                    {{#Translation}}<div style='font-family: Arial; font-size: 14px;'>{{Translation}}</div>{{/Translation}}"""
                               ),
                'afmt': dedent("""
                    {{#Word or Phrase}}<div style='font-family: Arial; font-size: 14px;'>{{Word or Phrase}}</div>{{/Word or Phrase}}
                    {{#Audio}}<div style='font-family: Arial; font-size: 14px;'>{{Audio}}</div>{{/Audio}}
                    """),
            },
            {
                'name': 'German to English',
                'qfmt': dedent("""
                    <div>{{Picture}}</div>
                    {{#Word or Phrase}}<div style='font-family: Arial; font-size: 14px;'>{{Word or Phrase}}</div>{{/Word or Phrase}}
                    <div style='font-family: Arial; font-size: 14px;'>{{Audio}}</div>
                    """),
                'afmt': dedent("""
                    {{#Translation}}<div style='font-family: Arial; font-size: 14px;'>{{Translation}}</div>{{/Translation}}
                    """)
            },
            {
                'name': 'Spelling',
                'qfmt': dedent("""\
                    Kannst du es buchstabieren?
                    <div style='font-family: Arial; font-size: 14px;'>{{Picture}}</div>
                    <div style='font-family: Arial; font-size: 14px;'>{{Audio}}</div>
                    """),
                'afmt': dedent("""\
                    <div style='font-family: Arial; font-size: 14px;'>{{Word or Phrase}}</div>
                    """)
            }
        ],
        css=""".card {
     font-family: arial;
     font-size: 14px;
     text-align: center;
     color: black;
     background-color: white;
    }"""
    )
    return my_model


def create_notes(results: list, genaki_model: genanki.Model) -> list:
    my_notes = []
    for item in results:
        img_url = item['image_page_url']

        my_note = genanki.Note(
            model=genaki_model,
            fields=[
                item.get('de-word', ''),
                item.get('en-word', ''),
                f"<img src='{item['image_file_resized']}'>",
                f"[sound:{item.get('de-voice', '').format(r's')}]"])
        my_notes.append(my_note)

    return my_notes


def create_deck(ids: dict, notes: list) -> genanki.Deck:
    genaki_deck = genanki.Deck(
        int(ids['deck_id']),
        'German-Genanki')

    for note in notes:
        genaki_deck.add_note(note)

    return genaki_deck


def create_media_database(results: list) -> list:
    media = [x.get('image_file_resized') for x in results if x['image_file'] is not None]
    media.extend([x['de-voice'] for x in results if x['de-voice'] is not None])

    return media


def package_deck(gaki_deck: genanki.Deck, media: list) -> genanki.Package:
    de_package = genanki.Package(gaki_deck)
    de_package.media_files = media

    return de_package


def clean_up(results: list) -> None:
    [os.remove(x['image_file']) for x in results if x['image_file'] is not None]
    [os.remove(x['image_file_resized']) for x in results if x['image_file_resized'] is not None]
    [os.remove(x['de-voice']) for x in results if x['de-voice'] is not None]


def azure_translate(settings: dict, word: str) -> str:
    """

    Args:
        settings:
        word:

    Returns:

    """
    headers = {
        'Ocp-Apim-Subscription-Key': settings['azure_translate_key'],
        'Content-type': 'application/json',
        'X-ClientTraceId': str(uuid.uuid4()),
        'Ocp-Apim-Subscription-Region': settings['translate_subscription_region']
    }

    body = [{
        'text': f'{word}'
    }]

    if langdetect.detect(word) == 'en':
        translate_api_url = settings['translate_api_url'].format('en', 'de')
    elif langdetect.detect(word) == 'de':
        translate_api_url = settings['translate_api_url'].format('de', 'en')
    else:
        # If we're unsure default to German? maybe not the most ideal outcome though
        translate_api_url = settings['translate_api_url'].format('de', 'en')

    request = requests.post(translate_api_url, headers=headers, json=body)
    response = request.json()
    return response[0]['translations'][0]['text']


def azure_voice_translate(settings: dict, search: str) -> str:
    filename = f"{search}.wav"
    speech_config = speechsdk.SpeechConfig(subscription=settings['azure_speech_key'],
                                           region=settings['voice_subscription_region'])
    audio_config = AudioOutputConfig(filename=filename)

    speech_synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config, audio_config=audio_config)
    ssml_string = open("ssml.xml", "r").read().format(search)

    result = speech_synthesizer.speak_ssml_async(ssml_string).get()

    if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
        logging.info(f"Speech synthesized to speaker for text {search}.")
        return filename
    elif result.reason == speechsdk.ResultReason.Canceled:
        cancellation_details = result.cancellation_details
        logging.error(f"Speech synthesis canceled: {cancellation_details.reason}.")
        if cancellation_details.reason == speechsdk.CancellationReason.Error:
            if cancellation_details.error_details:
                logging.error(f"Error details: {cancellation_details.error_details}.")
        logging.error("Did you update the subscription info?")


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    write_genaki()
    genaki_ids = load_ids()
    req_headers, req_params, yaml_settings = bing_setup()
    search_list = load_search_list()
    search_results = get_search_term_data(search_list, req_headers, req_params, yaml_settings)
    genaki_model = create_anki_model(genaki_ids)
    genaki_notes = create_notes(search_results, genaki_model)
    genaki_deck = create_deck(genaki_ids, genaki_notes)
    media_db = create_media_database(search_results)
    de_pack = package_deck(genaki_deck, media_db)

    de_pack.write_to_file('de_learning_package.apkg')
    clean_up(search_results)
